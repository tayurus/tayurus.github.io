{"version":3,"sources":["components/LaunchInfo/LaunchInfo.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["LaunchInfo","this","descriptor","setInterval","setState","clearInterval","props","mission","launch","years","months","date","hours","minutes","vehicle","location","launchDate","Date","className","toGMTString","dateNow","seconds","Math","floor","days","abs","calcTimeToLaunch","React","Component","defaultProps","App","state","entries","fetch","response","json","data","map","it","index","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAKaA,G,YAAb,kLACyB,IAAD,OAChBC,KAAKC,WAAaC,aAAY,WAC1B,EAAKC,SAAS,MACf,OAJX,6CAQQC,cAAcJ,KAAKC,cAR3B,+BAWc,IAAD,EAMDD,KAAKK,MAJLC,EAFC,EAEDA,QAFC,IAGDC,OAASC,EAHR,EAGQA,MAAOC,EAHf,EAGeA,OAAQC,EAHvB,EAGuBA,KAAMC,EAH7B,EAG6BA,MAAOC,EAHpC,EAGoCA,QACrCC,EAJC,EAIDA,QACAC,EALC,EAKDA,SAGEC,EAAa,IAAIC,KAAKR,EAAOC,EAAQC,EAAMC,EAAOC,GAExD,OACI,wBAAIK,UAAU,eACV,wBAAIA,UAAU,qBAAqBX,GACnC,wBAAIW,UAAU,qBAAqBJ,GACnC,wBAAII,UAAU,qBAAqBH,GACnC,wBAAIG,UAAU,qBAAqBF,EAAWG,eAC9C,wBAAID,UAAU,qBChCE,SAAAP,GAC5B,IAAIS,EAAU,IAAIH,KACdI,EAAUC,KAAKC,OAAOZ,EAAOS,GAAW,KACxCA,EAAUT,IACVU,EAAUC,KAAKC,OAAOH,EAAUT,GAAQ,MAI5C,IAAIE,EAAUS,KAAKC,MAAMF,EAAU,IAC/BT,EAAQU,KAAKC,MAAMV,EAAU,IAC7BW,EAAOF,KAAKC,MAAMX,EAAQ,IAM9B,OAFAS,EAAUA,EAAiB,GAAPG,EAAY,GAAK,GAAa,IAFlDZ,GAAuB,GAAPY,GAEuC,GAAe,IADtEX,EAAUA,EAAiB,GAAPW,EAAY,GAAa,GAARZ,GAG/B,GAAN,OAAUQ,EAAUT,EAAO,OAAS,KAApC,2BAA2DW,KAAKG,IAAID,GAApE,qBAAsFZ,EAAtF,uBAA0GC,EAA1G,uBAAgIQ,GDgBjFK,CAAiBV,SA3BpE,GAAgCW,IAAMC,YA8CtC5B,EAAW6B,aAAe,CACtBtB,QAAS,W,IEjBEuB,E,4MA9BXC,MAAQ,CACJC,QAAS,I,oMAIcC,MACnB,0F,cADEC,E,gBAGaA,EAASC,O,OAAtBC,E,OACNnC,KAAKG,SAAS,CAAC4B,QAASI,I,qIAIxB,OACI,2BAAOlB,UAAW,cACd,4BACI,uCACA,uCACA,wCACA,2CACA,sDAEHjB,KAAK8B,MAAMC,QAAQK,KAAI,SAACC,EAAIC,GAAL,OACpB,kBAAC,EAAeD,W,GAxBlBX,IAAMC,WCQJY,QACW,cAA7BC,OAAO1B,SAAS2B,UAEe,UAA7BD,OAAO1B,SAAS2B,UAEhBD,OAAO1B,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e16c484d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './LaunchInfo.scss';\r\nimport {calcTimeToLaunch} from './../../helpers';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class LaunchInfo extends React.Component {\r\n    componentDidMount() {\r\n        this.descriptor = setInterval(() => {\r\n            this.setState({});\r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.descriptor);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            mission,\r\n            launch: {years, months, date, hours, minutes},\r\n            vehicle,\r\n            location\r\n        } = this.props;\r\n\r\n        const launchDate = new Date(years, months, date, hours, minutes);\r\n\r\n        return (\r\n            <tr className='launch-info'>\r\n                <td className='launch-info__cell'>{mission}</td>\r\n                <td className='launch-info__cell'>{vehicle}</td>\r\n                <td className='launch-info__cell'>{location}</td>\r\n                <td className='launch-info__cell'>{launchDate.toGMTString()}</td>\r\n                <td className='launch-info__cell'>{calcTimeToLaunch(launchDate)}</td>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nLaunchInfo.propTypes = {\r\n    mission: PropTypes.string,\r\n    launch: PropTypes.shape({\r\n        years: PropTypes.number,\r\n        months: PropTypes.number,\r\n        date: PropTypes.number,\r\n        hours: PropTypes.number,\r\n        minutes: PropTypes.number\r\n    }),\r\n    vehicle: PropTypes.string,\r\n    location: PropTypes.string\r\n};\r\n\r\nLaunchInfo.defaultProps = {\r\n    mission: 'Unknown'\r\n};\r\n","export const calcTimeToLaunch = date => {\r\n    let dateNow = new Date();\r\n    let seconds = Math.floor((date - dateNow) / 1000);\r\n    if (dateNow > date) {\r\n        seconds = Math.floor((dateNow - date) / 1000);\r\n    }\r\n\r\n\r\n    let minutes = Math.floor(seconds / 60);\r\n    let hours = Math.floor(minutes / 60);\r\n    let days = Math.floor(hours / 24);\r\n\r\n    hours = hours - days * 24;\r\n    minutes = minutes - days * 24 * 60 - hours * 60;\r\n    seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\r\n\r\n    return `${dateNow > date ? 'from' : 'to'} launch - Days: ${Math.abs(days)} | Hours: ${hours} | Minutes: ${minutes} | Seconds: ${seconds}`;\r\n};\r\n","import React from 'react';\nimport './App.scss';\nimport {LaunchInfo} from './components';\n\nclass App extends React.Component {\n    state = {\n        entries: []\n    };\n\n    async componentDidMount() {\n        const response = await fetch(\n            'https://raw.githubusercontent.com/denissokolov/tc-internship-task/master/launches.json'\n        );\n        const data = await response.json();\n        this.setState({entries: data});\n    }\n\n    render() {\n        return (\n            <table className={'app__table'}>\n                <tr>\n                    <th>Mission</th>\n                    <th>Vehicle</th>\n                    <th>Location</th>\n                    <th>Launch date</th>\n                    <th>Time to / from launch</th>\n                </tr>\n                {this.state.entries.map((it, index) => (\n                    <LaunchInfo {...it} />\n                ))}\n            </table>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}