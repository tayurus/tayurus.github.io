{"version":3,"sources":["components/Button/Button.js","components/Point/Point.js","components/AdjacencyMatrix/AdjacencyMatrix.js","App.js","serviceWorker.js","reducers/mods.reducer.js","reducers/points.reducer.js","reducers/index.js","helpers/store.js","helpers/adjacencyMatrix.js","helpers/getDistanceBetweenTwoPoints.js","helpers/createDijkstraPath.js","index.js"],"names":["Button","props","title","className","onClick","react_default","a","createElement","defaultProps","Point","point","Fragment","data-text","text","cx","x","cy","y","r","fill","stroke","strokeWidth","AdjacencyMatrix","matrix","thRow","Array","length","map","item","itemIndex","row","rowIndex","key","style","fontWeight","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFieldClick","bind","assertThisInitialized","handlePointClick","e","_this$props","dispatch","mode","rect","target","getBoundingClientRect","type","newPoint","clientX","left","clientY","top","stopPropagation","_this$props2","pointText","parseInt","getAttribute","points","adjacencyMatrix","color","_this2","connectedPointsPairs","forEach","col","colIndex","push","pair","pairKey","drawLine","x1","y1","x2","y2","_this3","_this$props3","pathPairs","Button_Button_Button","pointKey","Point_Point","drawLines","AdjacencyMatrix_AdjacencyMatrix_AdjacencyMatrix","Component","connectedApp","connect","state","modsReducer","_state$pointsReducer","pointsReducer","Boolean","window","location","hostname","match","initialState","selectedPoints","rootReducer","combineReducers","arguments","undefined","action","objectSpread","concat","toConsumableArray","appendPointToAdjacencyMatrix","newSelectedPoints","_newSelectedPoints","slicedToArray","first","second","newAdjacencyMatrix","firstPoint","secondPoint","distance","getDistanceBetweenTwoPoints","path","createDijkstraPath","i","loggerMiddleware","createLogger","store","createStore","applyMiddleware","result","newRow","Math","sqrt","pow","toFixed","paths","end","newPaths","oldPathsLength","reduce","acc","pathIndex","isPointInPath","lastPointInVisited","sort","sortPaths","path1","path2","pointIndex","some","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e73bc914.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Button.css';\r\n\r\nexport const Button = (props) => {\r\n\r\n  const { title, className, onClick } = props;\r\n\r\n  return (\r\n    <button onClick={onClick} className={\"button \" + className}>{title}</button>\r\n  )\r\n}\r\n\r\nButton.defaultProps = {\r\n  title: \":)\",\r\n  className: \"\"\r\n}\r\n","import React from 'react';\r\n\r\n\r\nexport const Point = props => {\r\n\r\n  const { point, onClick } = props;\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <circle data-text={point.text} onClick={onClick} cx={point.x} cy={point.y} r='25' fill='#ccc' stroke=\"tomato\" strokeWidth='2'/>\r\n      <text data-text={point.text} onClick={onClick} x={point.x - 5} y={point.y + 5} stroke=\"red\" strokeWidth='2'>{point.text}</text>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './AdjacencyMatrix.css'\r\nexport const AdjacencyMatrix = props => {\r\n\r\n  const { matrix } = props;\r\n\r\n  const thRow = new Array(matrix.length).fill(0);\r\n  return (\r\n    <table className=\"adjacencyMatrix\">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          {thRow.map( (item, itemIndex) => <th>{itemIndex}</th>)}\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {matrix.map( (row, rowIndex) => {\r\n          return (\r\n            <tr key={rowIndex}>\r\n              <td style={{'fontWeight':'bold'}}>{rowIndex}</td>\r\n              {row.map( (item, itemIndex) => <td key={itemIndex}>{item}</td>)}\r\n            </tr>\r\n          )\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Point, AdjacencyMatrix } from './components';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleFieldClick = this.handleFieldClick.bind(this);\n    this.handlePointClick = this.handlePointClick.bind(this);\n  }\n\n  handleFieldClick(e) {\n    const { dispatch, mode } = this.props;\n\n    if (mode === 'createPoint') {\n      var rect = e.target.getBoundingClientRect();\n      var x = e.clientX - rect.left; //x position within the element.\n      var y = e.clientY - rect.top;  //y position within the element.\n      const newPoint = {\n        x, y\n      }\n\n      dispatch({type: 'newPoint', newPoint});\n    }\n  }\n\n  handlePointClick(e) {\n    e.stopPropagation();\n\n    const { mode, dispatch } = this.props;\n\n    if (mode === 'connectPoints' || mode === 'createPath') {\n      dispatch({type: 'selectPoint', pointText: parseInt(e.target.getAttribute('data-text')), mode: mode});\n    }\n  }\n\n  drawLines(points, adjacencyMatrix, color){\n\n    let connectedPointsPairs = [];\n\n    adjacencyMatrix.forEach( (row, rowIndex) => {\n      row.forEach( (col, colIndex) => {\n        if (col > 1 && colIndex !== rowIndex) {\n          connectedPointsPairs.push([points[colIndex], points[rowIndex]]);\n        }\n      })\n    })\n\n    return connectedPointsPairs.map( (pair, pairKey) => this.drawLine(pair, pairKey, color) );\n  }\n\n  drawLine(pair, pairKey, color) {\n    return (<line key={pairKey}\n           stroke={color}\n           strokeWidth=\"2\"\n           x1={pair[0].x}\n           y1={pair[0].y}\n           x2={pair[1].x}\n           y2={pair[1].y}/>)\n  }\n\n  render() {\n    const { mode, dispatch, points, adjacencyMatrix, pathPairs } = this.props;\n    return (\n      <div className=\"App\">\n\n        <div className=\"App__mods-panel\">\n          <Button title='Создать точку'\n                  onClick={() => dispatch({type: 'changeMode', mode: 'createPoint'})}\n                  className={mode === 'createPoint' ? 'button_active' : ''}/>\n          <Button title='Построить маршрут'\n                  onClick={() => dispatch({type: 'changeMode', mode: 'createPath'})}\n                  className={mode === 'createPath' ? 'button_active' : ''}/>\n          <Button title='Соединить точки'\n                  onClick={() => dispatch({type: 'changeMode', mode: 'connectPoints'})}\n                  className={mode === 'connectPoints' ? 'button_active' : ''}/>\n        </div>\n\n        <div className=\"App__row\">\n\n          <svg className=\"App__field\" onClick={(e) => this.handleFieldClick(e)}>\n            {points.map( (point, pointKey) => <Point key={pointKey} onClick={this.handlePointClick}\n                                         point={point}/>)}\n\n            {this.drawLines(points, adjacencyMatrix, 'red')}\n            {pathPairs.map((pair, pairKey) => this.drawLine(pair, pairKey, 'limegreen'))}\n          </svg>\n\n          <AdjacencyMatrix matrix={adjacencyMatrix}/>\n\n        </div>\n\n\n\n      </div>\n    );\n  }\n}\n// {this.drawLines(path, adjacencyMatrix, 'limegreen')}\n\nfunction mapStateToProps(state) {\n  const { mode } = state.modsReducer;\n  const { points, adjacencyMatrix, pathPairs } = state.pointsReducer;\n\n  return {mode, points, adjacencyMatrix, pathPairs};\n}\n\nconst connectedApp = connect(mapStateToProps, null)(App);\n\nexport { connectedApp as App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst initialState = {\r\n  mode: 'createPoint'\r\n}\r\n\r\nexport const modsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'changeMode':\r\n      return {\r\n        mode: action.mode\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { appendPointToAdjacencyMatrix, getDistanceBetweenTwoPoints, createDijkstraPath } from './../helpers';\r\n\r\nconst initialState = {\r\n  points: [],\r\n  selectedPoints: [],\r\n  adjacencyMatrix: [],\r\n  pathPairs: []\r\n}\r\n\r\nexport const pointsReducer = (state = initialState, action) => {\r\n\r\n  const { points, adjacencyMatrix, selectedPoints } =  state;\r\n  const { mode } = action;\r\n\r\n  switch (action.type) {\r\n    case 'newPoint':\r\n      let newPoint = {...action.newPoint};\r\n      newPoint.text = points.length;\r\n      return {...state,\r\n              points: [...points, newPoint],\r\n              adjacencyMatrix: appendPointToAdjacencyMatrix(adjacencyMatrix)\r\n             }\r\n\r\n    case 'selectPoint':\r\n\r\n      let newSelectedPoints = [...selectedPoints];\r\n      newSelectedPoints.push(action.pointText);\r\n\r\n      if (newSelectedPoints.length === 2) {\r\n        if (action.mode === 'connectPoints') {\r\n            const [first, second] = newSelectedPoints;\r\n            const newAdjacencyMatrix = [...adjacencyMatrix];\r\n            const firstPoint = points[first];\r\n            const secondPoint = points[second];\r\n            const distance = getDistanceBetweenTwoPoints(firstPoint.x, firstPoint.y, secondPoint.x, secondPoint.y)\r\n            newAdjacencyMatrix[first][second] = distance;\r\n            newAdjacencyMatrix[second][first] = distance;\r\n\r\n            return {...state,\r\n              selectedPoints:[],\r\n              adjacencyMatrix: newAdjacencyMatrix\r\n             }\r\n          }\r\n\r\n        if (mode === 'createPath') {\r\n          if (newSelectedPoints.length === 2) {\r\n            const path = createDijkstraPath([[{ text: newSelectedPoints[0], distance: 1}]], newSelectedPoints[1], adjacencyMatrix);\r\n            const pathPairs = [];\r\n            for (let i = 0; i < path.length - 1; i++) {\r\n              pathPairs.push([points[path[i].text], points[path[i + 1].text]])\r\n            }\r\n            return {...state, selectedPoints: [], pathPairs}\r\n          }\r\n\r\n\r\n        }\r\n      }\r\n\r\n      return {...state, selectedPoints: newSelectedPoints}\r\n\r\n    default:\r\n      return state;\r\n\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { modsReducer } from './mods.reducer.js';\r\nimport { pointsReducer } from './points.reducer.js';\r\n\r\nexport const rootReducer = combineReducers({modsReducer, pointsReducer});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './../reducers';\r\nimport { createLogger } from 'redux-logger';\r\n\r\nconst loggerMiddleware = createLogger();\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(loggerMiddleware));\r\n","export const appendPointToAdjacencyMatrix = (matrix) => {\r\n  let result = [...matrix];\r\n\r\n  result.forEach( row => {\r\n    row.push(-1);\r\n  });\r\n\r\n  const newRow = Array(result.length + 1).fill(-1);\r\n\r\n  newRow[result.length] = 1;\r\n\r\n  result.push(newRow)\r\n\r\n  return result;\r\n}\r\n","export const getDistanceBetweenTwoPoints = (x1,y1,x2,y2) => {\r\n  return parseInt(Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2)).toFixed(0));\r\n}\r\n","export const createDijkstraPath = (paths, end, adjacencyMatrix) => {\r\n  let newPaths = [];\r\n  let oldPathsLength = paths.reduce( (acc, path) => path.length );\r\n\r\n  paths.forEach((path, pathIndex) => {\r\n\r\n    if (!isPointInPath(path, end)) {\r\n      const lastPointInVisited = path[path.length - 1];\r\n      for (let i = 0; i < adjacencyMatrix.length; i++) {\r\n        if (adjacencyMatrix[lastPointInVisited.text][i] > 1 && !isPointInPath(path, i)) {\r\n          newPaths[newPaths.length] = [...path];\r\n          newPaths[newPaths.length - 1].push({\r\n            text: i,\r\n            distance: adjacencyMatrix[lastPointInVisited.text][i]\r\n          });\r\n        }\r\n      }\r\n\r\n    } else {\r\n      newPaths.push(path);\r\n    }\r\n\r\n  })\r\n\r\n\r\n\r\n  let newPathsLength  = newPaths.reduce( (acc, path) => path.length );\r\n\r\n  if (oldPathsLength === newPathsLength) {\r\n    return newPaths.sort(sortPaths)[0];\r\n  } else {\r\n    return createDijkstraPath(newPaths, end, adjacencyMatrix);\r\n  }\r\n\r\n}\r\n\r\nfunction sortPaths(path1,path2) {\r\n  const path1Length = path1.reduce( (acc, item) => acc + item.distance, 0 );\r\n  const path2Length = path2.reduce( (acc, item) => acc + item.distance, 0 );\r\n  return path1Length - path2Length;\r\n}\r\n\r\nconst isPointInPath = (path, pointIndex) => {\r\n  return path.some(item => item.text === pointIndex)\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport  { Provider } from 'react-redux';\nimport { store } from './helpers';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}