{"version":3,"sources":["components/card/index.js","components/cardsGrid/index.js","components/card/constants.js","components/card/services.js","components/card/actions.js","App.js","serviceWorker.js","components/card/reducer.js","redux/index.js","index.js"],"names":["Card","_ref","title","price","area","sotki","react_default","a","createElement","className","style","backgroundImage","toLocaleString","defaultProps","square","CardsGrid","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","cards","map","card","index","card_Card","assign","React","Component","cardConstants","cardsService","getCards","_callee","offset","data","_args","arguments","regenerator_default","wrap","_context","prev","next","length","undefined","fetch","sent","abrupt","json","stop","cardsActions","paginationIndex","dispatch","type","then","res","errors","items","total","pagination","limit","catch","err","App","_this","handlePaginationItemClick","bind","assertThisInitialized","_this$props","error","alert","loading","kind","currency","saleOffer","specification","toFixed","_this$props2","cardsGrid_CardsGrid","lib","parseInt","activePage","onSelect","maxButtons","size","connectedApp","connect","state","Boolean","window","location","hostname","match","initialState","store","createStore","action","objectSpread","applyMiddleware","thunkMiddleware","logger","ReactDOM","render","es","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c311c40.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const Card = ({ title, price, area, sotki }) => {\r\n  // console.log(\"kind = \", kind);\r\n  return (\r\n    <div className=\"card\">\r\n      <div\r\n        className=\"card__image\"\r\n        style={{\r\n          backgroundImage: \"url(https://www.13min.ru/wp-content/uploads/2012/10/Sobstvennyj-dom.jpg)\"\r\n        }}\r\n      />\r\n      <div className=\"card__title\">{title}</div>\r\n      <div className=\"card__price\">{price.toLocaleString()}</div>\r\n      <div className=\"card__area\">\r\n        <div className=\"card__sotki\">{sotki} сот</div>\r\n        <div className=\"card__square\">\r\n          {area} м<sup>2</sup>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  price: PropTypes.string.isRequired,\r\n  sotki: PropTypes.string.isRequired,\r\n  square: PropTypes.string.isRequired\r\n};\r\n\r\nCard.defaultProps = {\r\n  title: \"Дом\",\r\n  price: \"100 000\",\r\n  sotki: \"3\",\r\n  square: \"100\"\r\n};\r\n","import React from \"react\";\r\nimport \"./cardsGrid.css\";\r\n\r\nimport { Card } from \"./../\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class CardsGrid extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    const { cards } = this.props;\r\n    return (\r\n      <div className=\"cards-grid\">\r\n        {cards.map((card, index) => (\r\n          <Card key={index} {...card} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCardsGrid.propTypes = {\r\n  cards: PropTypes.array\r\n};\r\n\r\nCardsGrid.defaultProps = {\r\n  cards: []\r\n};\r\n","export const cardConstants = {\r\n  GET_CARDS_REQUEST: \"GET_CARDS_REQUEST\",\r\n  GET_CARDS_FAILURE: \"GET_CARDS_FAILURE\",\r\n  GET_CARDS_SUCCESS: \"GET_CARDS_SUCCESS\"\r\n};\r\n","export const cardsService = {\r\n  getCards\r\n};\r\n\r\nasync function getCards(offset = 0) {\r\n  const data = await fetch(\"https://api.jqestate.ru/v1/properties/country?pagination[offset]=\" + offset);\r\n  return data.json();\r\n}\r\n","import { cardConstants } from \"./constants\";\r\nimport { cardsService } from \"./services.js\";\r\n\r\nconst getCards = (offset, paginationIndex) => {\r\n  return dispatch => {\r\n    dispatch({ type: cardConstants.GET_CARDS_REQUEST });\r\n\r\n    cardsService\r\n      .getCards(offset)\r\n      .then(res => {\r\n        if (typeof res.errors !== \"undefined\") {\r\n          dispatch({ type: cardConstants.GET_CARDS_FAILURE });\r\n        } else {\r\n          dispatch({\r\n            type: cardConstants.GET_CARDS_SUCCESS,\r\n            cards: res.items,\r\n            total: res.pagination.total,\r\n            limit: res.pagination.limit,\r\n            paginationIndex: paginationIndex\r\n          });\r\n        }\r\n      })\r\n      .catch(err => dispatch({ type: cardConstants.GET_CARDS_FAILURE }));\r\n  };\r\n};\r\n\r\nexport const cardsActions = {\r\n  getCards\r\n};\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Card } from \"./components\";\r\nimport { CardsGrid } from \"./components\";\r\nimport { Pagination, Preloader } from \"react-materialize\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { cardsActions } from \"./components/card/actions\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { dispatch } = this.props;\r\n\r\n    dispatch(cardsActions.getCards(0));\r\n\r\n    this.handlePaginationItemClick = this.handlePaginationItemClick.bind(this);\r\n  }\r\n\r\n  handlePaginationItemClick(paginationIndex) {\r\n    const { dispatch, limit } = this.props;\r\n    dispatch(cardsActions.getCards((paginationIndex - 1) * limit, paginationIndex));\r\n  }\r\n\r\n  render() {\r\n    if (this.props.error) {\r\n      alert(\"При загрузке произошла ошибка!\");\r\n      return <div />;\r\n    } else if (!this.props.loading) {\r\n      const cards = this.props.cards.map(card => ({\r\n        title: card.kind,\r\n        currency: card.saleOffer ? card.saleOffer.currency : \"none\",\r\n        price: card.saleOffer ? card.saleOffer.price : \"none\",\r\n        area: card.specification.area,\r\n        sotki: (card.specification.area / 100).toFixed(1)\r\n      }));\r\n\r\n      const { total, limit, paginationIndex } = this.props;\r\n      return (\r\n        <div className=\"App\">\r\n          <div className=\"container\">\r\n            <CardsGrid cards={cards} />\r\n            <Pagination\r\n              className=\"App__pagination\"\r\n              items={parseInt(total / limit) + (total > limit && total % limit ? 1 : 0)}\r\n              activePage={paginationIndex}\r\n              onSelect={this.handlePaginationItemClick}\r\n              maxButtons={8}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App App_loading\">\r\n        <Preloader size=\"big\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  const { cards, total, limit, loading, paginationIndex, error } = state;\r\n\r\n  return {\r\n    cards,\r\n    total,\r\n    limit,\r\n    loading,\r\n    paginationIndex,\r\n    error\r\n  };\r\n}\r\n\r\nconst connectedApp = connect(\r\n  mapStateToProps,\r\n  null\r\n)(App);\r\n\r\nexport { connectedApp as App };\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { cardConstants } from \"./constants.js\";\r\n\r\nconst initialState = { cards: [], paginationIndex: 1 };\r\nexport const cardReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case cardConstants.GET_CARDS_REQUEST:\r\n      return { ...state, loading: true, error: false };\r\n\r\n    case cardConstants.GET_CARDS_FAILURE:\r\n      return { ...state, loading: false, error: true };\r\n\r\n    case cardConstants.GET_CARDS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        cards: action.cards,\r\n        total: action.total,\r\n        limit: action.limit,\r\n        paginationIndex: action.paginationIndex,\r\n        loading: false,\r\n        error: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n  return state;\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { logger } from \"redux-logger\";\r\n\r\n//reducers\r\nimport { cardReducer } from \"./../components/card/reducer\";\r\n\r\nexport const store = createStore(\r\n  cardReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}